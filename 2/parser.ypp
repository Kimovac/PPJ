%{

#include <iostream>
#include <cstdlib>
#include <string>
#include <map>

using namespace std;

extern int yylex();

#include "angle.hpp"

void yyerror(string s) {
	cerr << "Syntax error: " << s << endl;
	exit(EXIT_FAILURE);
}

map<string, Angle*> vars;

void free_vars() {
	for(auto it = vars.begin(); it != vars.end(); it++)
		delete it->second;
}

%}

%union {
	int num;
	string *name;
	Angle *p;
}

%left EQ NEQ GEQ LEQ LES GRE RAD
%left '+' '-'
%left '*' '/'


%token ASSIGN MAX MIN AVG OB CB
%token<name> ID
%token<num> NUM

%type<p> exp list angle

%start program

%%

program: command '\n' program 	{	}
	|
	;
command: exp 					{	cout << *$1 << endl; delete $1; }
	| ID ASSIGN exp 				{
									auto it = vars.find(*$1);
									if(it != vars.end())
										delete it->second;

									vars[(*$1)] = $3;
									delete $1; 
								}
	| exp EQ exp 				{	cout << ((*$1 == *$3)? "True" : "False") << endl; }
	| exp NEQ exp 				{	cout << ((*$1 != *$3)? "True" : "False") << endl; }
	| exp GEQ exp 				{	cout << ((*$1 >= *$3)? "True" : "False") << endl; }
	| exp LEQ exp 				{	cout << ((*$1 <= *$3)? "True" : "False") << endl; }
	| exp LES exp 				{	cout << ((*$1 < *$3)? "True" : "False") << endl; }
	| exp GRE exp 				{	cout << ((*$1 > *$3)? "True" : "False") << endl; }
	;
exp: exp '+' exp 				{	$$ = *$1 + *$3; delete $1; delete $3; }
	| exp '-' exp 				{	$$ = *$1 - *$3; delete $1; delete $3; }
	| exp '*' NUM 				{	$$ = $1->scalar_mul($3); delete $1; }
	| exp '/' NUM 				{	$$ = $1->scalar_div($3); delete $1; }
	| '(' exp ')' 				{	$$ = $2; delete $2; }
	| ID 						{
									auto it = vars.find(*$1);
									if(it == vars.end())
										yyerror("Nedefinisana promenjljiva");

									$$ = new Angle(*(it->second));
									delete $1; 
								}
	| ID OB NUM CB 			{
									auto it = vars.find(*$1);
									if(it == vars.end())
										yyerror("Nedefinisana promenjljiva");

									if($3 < 0 || $3 >= it->second->size())
										yyerror("Ne postoji indeks");

									$$ = it->second->index($3);
									delete $1; 
								}
	| MAX '(' ID ')' 			{
									auto it = vars.find(*$3);
									if(it == vars.end())
										yyerror("Nedefinisana promenjljiva");

									$$ = it->second->max();

									delete $3;
								}
	| MIN '(' ID ')' 			{
									auto it = vars.find(*$3);
									if(it == vars.end())
										yyerror("Nedefinisana promenjljiva");

									$$ = it->second->min();

									delete $3;
								}
	| AVG '(' ID ')' 			{
									auto it = vars.find(*$3);
									if(it == vars.end())
										yyerror("Nedefinisana promenjljiva");

									$$ = it->second->avg();

									delete $3;
								}
	| angle 					{	$$ = $1; }
	| OB list CB 				{	$$ = $2; }
	;
list: list ',' angle 			{
									$1->insert(*$3);
									$$ = new Angle(*$1);
									delete $1; delete $3;
								}
	| angle 					{	$$ = new Angle(*$1); }
	;
angle: NUM '.' NUM '.' NUM 		{
									if($3 > 60 || $5 > 60)
										yyerror("Neispravan izraz");

									$$ = new Angle($1, $3, $5);
								}
	;

%%

int main() {

	if(yyparse() != 0)
		yyerror("To many tokens!");

	cout << "OK" << endl;

	free_vars();

	exit(EXIT_SUCCESS);
}