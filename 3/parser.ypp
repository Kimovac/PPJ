%{

#include <iostream>
#include <cstdlib>
#include <string>
#include <map>

using namespace std;

extern int yylex();

#include "nums.hpp"

void yyerror(string s) {
	cerr << "Syntax error: " << s << endl;
	exit(EXIT_FAILURE);
}

map<string, Num*> vars;

void free_vars() {
	for(auto it = vars.begin(); it != vars.end(); it++)
		delete it->second;
} 

%}

%union {
	int num;
	string *name;
	Num* p;
}

%left '&' '|'
%left EQ
%left '+' '-'
%left '*' '/'
%left SHL SHR
%right NEG

%token
%token OB CB SHL SHR ASSIGN EQ PRINT INT LIST NEG
%token<name> ID LID
%token<num> NUM

%type<p> exp list

%start program

%%

program: command '\n' program		{	}
	|
	;
command: INT ID ASSIGN exp ';'		{
										auto it = vars.find(*$2);
										if(it != vars.end())
											delete it->second;

										vars[*$2] = $4;

										delete $2;
									}
	| PRINT '(' exp ')' ';'			{
										if(!$3->is_list())
											cout << $3->base(10) << endl;
										else
											cout << *$3 << endl;
										delete $3;
									}
	| PRINT '(' exp ',' NUM ')' ';'	{
										if(!($5 == 16 || $5 == 8))
											yyerror("Nepodrzana osnova!");
										cout << $3->base($5) << endl;
										delete $3;
									}
	| LIST LID ASSIGN exp ';' 		{
										auto it = vars.find(*$2);
										if(it != vars.end())
											delete it->second;

										vars[*$2] = $4;

										delete $2;
									}
	| exp EQ exp ';'				{
										cout << ((*$1 == *$3)? "True!" : "False!") << endl;
									}
	;
exp: ID 							{	auto it = vars.find(*$1);
										if(it == vars.end())
											yyerror(*$1 + " nije definisana!");

										$$ = new Num(*(it->second));
										delete $1;
									}
	| LID 							{	auto it = vars.find(*$1);
										if(it == vars.end())
											yyerror(*$1 + " nije definisana!");

										$$ = new Num(*(it->second));
										delete $1;
									}
	| LID OB NUM CB 				{
										auto it = vars.find(*$1);
										if(it == vars.end())
											yyerror(*$1 + " nije definisana!");

										$$ = new Num((it->second)->index($3));

									}
	| exp '+' exp 					{	$$ = *$1 + *$3; delete $1; delete $3; }
	| exp '-' exp 					{	$$ = *$1 - *$3; delete $1; delete $3; }
	| exp '*' exp 					{	$$ = *$1 * *$3; delete $1; delete $3; }
	| exp '/' exp 					{	$$ = *$1 / *$3; delete $1; delete $3; }
	| exp '&' exp 					{	$$ = *$1 & *$3; delete $1; delete $3; }
	| NEG exp %prec NEG 			{	$$ = ~*$2; delete $2; }
	| exp '|' exp 					{	$$ = *$1 | *$3; delete $1; delete $3; }
	| exp SHL exp 					{	$$ = *$1 << *$3; delete $1; delete $3; }
	| exp SHR exp 					{	$$ = *$1 >> *$3; delete $1; delete $3; }
	| OB list CB					{	$$ = $2; }
	| NUM 							{	$$ = new Num($1); }
	;
list: list ',' NUM 					{	$1->add($3);
										$$ = new Num(*$1);
										delete $1;
									}
	| NUM 							{	$$ = new Num($1); }
	;
%%

int main() {

	if(yyparse() != 0)
		yyerror("To many tokens!");

	cout << "OK" << endl;

	free_vars();

	exit(EXIT_SUCCESS);
}